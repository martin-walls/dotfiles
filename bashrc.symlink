# vim:filetype=sh
# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# colored GCC warnings and errors
#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

# set PATH variables
export PATH=~/.dotfiles/bin:~/bin:${PATH}

# load local config file if it exists
if [ -f ~/.bashrc_local ]; then
    . ~/.bashrc_local
fi

# load local aliases file if it exists
if [ -f ~/.bash_aliases_local ]; then
	. ~/.bash_aliases_local
fi

if [ -n "$SSH_CLIENT" ] || [ -n "$SSH_TTY" ]; then
    prompt_host="@\h"
fi

# show git status in prompt
if [ -f ~/.git-prompt.sh ] ; then
    . ~/.git-prompt.sh
    # PROMPT_COMMAND="__git_ps1 '\a${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u${prompt_host}\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]' '\\\$ '"
    PROMPT_COMMAND="__git_ps1 '\[\033]0;\w\007\]\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]' '\n\\\$ '"
    GIT_PS1_SHOWDIRTYSTATE=1
    GIT_PS1_SHOWUNTRACKEDFILES=1
    GIT_PS1_SHOWSTASHSTATE=1
    GIT_PS1_SHOWUPSTREAM="auto verbose"
    GIT_PS1_SHOWCOLORHINTS=1
fi

# PROMPT_COMMAND="\[\e]0;\u@\h: \w\a${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u${prompt_host}\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ "

unset prompt_host

# shorten pwd in prompt to only show 2 dirs
PROMPT_DIRTRIM=2

export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

eval "$(dircolors ~/.dircolors)" # load custom ls colors


# set up ssh-agent
# makes sure there is one shared instance of ssh-agent between all bash shells
# kills the agent when the last bash shell is exited
SSH_ENV="$HOME/.ssh/agent.env"
# add ssh identities that should be added to agent automatically here
ssh_identities=( "$HOME/.ssh/id_ed25519" )

start_ssh_agent () {
    echo "Initialising new SSH agent..."
    touch $SSH_ENV
    chmod 600 "${SSH_ENV}"
    ssh-agent | sed 's/^echo/#echo/' >> "${SSH_ENV}"
    . "${SSH_ENV}" > /dev/null
    ssh-add "${ssh_identities[@]}"
}

kill_ssh_agent () {
    bash_count=$(pgrep -c bash)
    if [ $bash_count -gt 2 ]; then
        # don't kill agent when there's still a bash shell running;
        # because this function is executed from inside a bash shell,
        # 2 bash processes will be found when the last real bash shell is exited
        true
    else
        # kill agent since this is the last bash shell
        eval $(ssh-agent -k)
        rm "${SSH_ENV}"
    fi
}

# source SSH settings if applicables
ssh-init () {
    if [ -f "${SSH_ENV}" ]; then
        . "${SSH_ENV}" > /dev/null
        kill -0 $SSH_AGENT_PID 2>/dev/null || {
            start_ssh_agent
        }
    else
        start_ssh_agent
    fi
}

trap kill_ssh_agent EXIT

# set default editor to vim
export VISUAL=vim
export EDITOR="$VISUAL"

if [[ $- == *i* && -e ~/.dotfiles/terminal_header/header.sh ]] ; then
    ~/.dotfiles/terminal_header/header.sh
fi

export LESS_TERMCAP_mb=$'\e[1;32m'
export LESS_TERMCAP_md=$'\e[1;32m'
export LESS_TERMCAP_me=$'\e[0m'
export LESS_TERMCAP_se=$'\e[0m'
export LESS_TERMCAP_so=$'\e[01;33m'
export LESS_TERMCAP_ue=$'\e[0m'
export LESS_TERMCAP_us=$'\e[1;4;31m'

# ┌────────────────┐
# │ Android Studio │
# └────────────────┘
export ANDROID_HOME=$HOME/Android/Sdk
export PATH=$PATH:$ANDROID_HOME/emulator
export PATH=$PATH:$ANDROID_HOME/tools
export PATH=$PATH:$ANDROID_HOME/tools/bin
export PATH=$PATH:$ANDROID_HOME/platform-tools

# set tabstop to 2
tabs 2
